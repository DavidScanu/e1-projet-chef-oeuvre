# Python In-built packages
import os
import uuid

# External packages
import streamlit as st
from streamlit_star_rating import st_star_rating
import pandas as pd

# Local Modules
import database
from helper import delete_dir_files, clear_past_detections_files, display_detection_imgs, display_detection_details, display_detection_boxes

# Setting page layout
st.set_page_config(
    page_title="D√©tections pass√©es",
    page_icon="üñºÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Main page heading
st.header("üñºÔ∏è D√©tections pass√©es", divider="rainbow")


# Si la table existe
if database.if_table_exists("app_detection_jobs"):
    # Requete jointe pour afficher les d√©tections pass√©es
    past_detections_query = """
        SELECT job_id, job_created_at
        FROM app_detection_jobs
        """
    past_detections_df = database.sql_query_to_dataframe(past_detections_query)
else: 
    past_detections_df = pd.DataFrame() # DataFrame vide, √©vite l'erreur avec 'None'


# Session state
if 'data_erased' not in st.session_state:
    st.session_state.data_erased = False

def click_erase_button():
    st.session_state.data_erased = True

if st.session_state.data_erased:
    past_detections_df = pd.DataFrame()
    st.error('Toutes les d√©tections pass√©es sont effac√©es !', icon="üëè")


# Si le DataFrame des d√©tections pass√©es est vide
if past_detections_df.empty:
    st.warning("Aucunes d√©tections sauvegard√©es. Veuillez r√©aliser votre premi√®re d√©tection sur la page **D√©tection**.")
else:

    # Conversion de la date au bon Timezone
    past_detections_df['job_created_at'] = past_detections_df['job_created_at'].dt.tz_convert(tz='Europe/Paris')
    # Trier par dates, les plus r√©cents en premier
    past_detections_df.sort_values(by='job_created_at', ascending=False, inplace=True, ignore_index=True)
    
    for i in range(len(past_detections_df)):
        
        job_id = past_detections_df.loc[i, 'job_id']

        with st.container(border=True):

            display_detection_imgs(job_id=job_id)

            with st.expander("üìù D√©tails de la d√©tection"):
                # D√©tails de la d√©tection
                display_detection_details(job_id=job_id)
                # Bo√Ætes de d√©tection
                display_detection_boxes(job_id=job_id)

            # Affichage des votes
            rating_sql_query = f"""
                SELECT *
                FROM app_detection_ratings
                WHERE dr_job_id = '{job_id}';
                """
            rating_df = database.sql_query_to_dataframe(rating_sql_query)

            if not rating_df.empty: 
                rating_dict = rating_df.to_dict(orient='records')
                # st.dataframe(rating_df)
                # st.write(rating_dict)
                st.success(f"Merci d'avoir vot√© {rating_dict[0]['dr_rating']} √©toiles pour cette d√©tection !")

# Effacer ou supprimer les d√©tections pass√©es
tables_list = [
    "app_detection_jobs",
    "app_imgs_original",
    "app_imgs_detected",
    "app_detection_labels",
    "app_detection_boxes"
]

if st.button('üóëÔ∏è Effacer les d√©tections pass√©es', type="primary", on_click=click_erase_button): 
    with st.spinner('T√¢che en cours...'):
        for table in tables_list:
            database.erase_table(table)
        clear_past_detections_files("./detections")

if st.button('‚ö†Ô∏è Supprimer toutes les tables', type="primary", on_click=click_erase_button): 
    with st.spinner('T√¢che en cours...'):
        for table in tables_list:
            database.drop_table(table)
        clear_past_detections_files("detections")
